--щоб глянути що є в таблиці даних
db.users.find()
-- щоб щось додати в таблицю
db.users.insertOne({cars: 'BMW', model: 's3'})
--вибірка пошуку по конкретним полям
db.users.find({gender: 'female', age: 29})
--використання or-це як ключ, буде шукати по одному співпадінню з 3 варіантів
db.users.find({
    $or: [
        {rating: 2},
        {rating: 5},
        {age: 12}
    ]
})
--використання and- шукає і те і те, де в одному об'єкті є два співпадіння
db.users.find({
    $and: [
        {rating: 5},
        {age: 25}
    ]
})
--використання in-шукає всіх з цими параметрами,всіх хто входять
db.users.find({age: {$in: [25, 12, 26]}})
--використання nin-шукає всіх окрім тих які параметри вказані, всіх хто не входять
db.users.find({age: {$nin: [25, 12, 26]}})
--використання nin-більш широкий(повний) запис, результат той самий
db.users.find({
    age: {
        $not: {
            $in: [25, 12, 26]
        }
    }
})
--регулярні вирази - шукаємо по name всіх юзерів в кого ім'я починається на букву а
--^-має починатись з тієї літери що стоїть після знаку ^
--i-допомагає не зважати на регістр(шукає і у верхньому і в нижньому
db.users.find({name: /^a/i})
--$- після букви долар(ім'я повинно закінчуватись на а)
db.users.find({name: /a$/i})
-- .{2} - пропуск двох символів. Тобто кажемо що всерівно з якого символу буде
-- починатись ^ потім пропускаємо .{2} два символи, третю букву хочемо t і регістр байдуже
db.users.find({name: /^.{2}t/i})
-- знайти всіх в кого ім'я починається на к-(^k), закінчуватись на а-(a$), в середині слова
-- байдуже скільки символів -(.*)
db.users.find({name: /^k.*a$/i})
--Знайти всіх name в яких в слові є буква v. Всерівно скільки буде спочатку
-- слова (.*) і всерівно скільки в кінці
db.users.find({name: /.*v.*/i})
--Якщо третя буква з кінця o. Всерівно скільки буде спочатку слова (.*), потів дві
-- пропускаємо (.{2}) і доставляємо знак $- говорить про те що шукаємо з кінця
db.users.find({name: /.*o.{2}$/i})
-- шукаємо довжину слова. Будь які символи з початку і в кінці 4 штуки.
db.users.find({name: /^.{4}$/})
--sort-сортування, шукаємо всіх по рейтингу, якщо 1- від мінімального до максимального,
-- якщо -1 від максимального до мінімального. З age тас само
db.users.find().sort({rating: -1, age: 1})
-- якщо хочемо шукати по булевому значенню
db.users.find({age: true})
--limit- скількох хочемо взяти, skip- скількох хочемо пропустити
db.users.find().sort({rating: -1, age: 1}).limit(2).skip(4)
--булівські операції - gt - більше ніж - (>)
db.users.find({rating: {$gt: 2}})
--gte - (>=)
db.users.find({rating: {$gte: 2}})
--lt - менше ніж - (<)
db.users.find({rating: {$lt: 2}})
-- lte - (<=)
db.users.find({rating: {$lte: 2}})
-- ne - (!=) - не дорівнює
db.users.find({rating: {$ne: 2}})
-- eq - дорівнює - (=)
db.users.find({rating: {$eq: 2}})
-- рівнозначний запис попередньому rating: {$eq: 2}
db.users.find({rating: 2})

-- updateOne- оновлення одного об'єкту. (_id) - це спеціальний об'єкт
db.users.updateOne(
    {_id: ObjectId("63b5624bcae1d07fe7728314")},
    {$set: {rating: 8}}
    )
-- хочемо глянути на об'єкт який оновили
db.users.find({_id: ObjectId("63b5624bcae1d07fe7728314")})

-- updateMany -оновлення багатьох
db.users.updateMany(
    {gender: 'male'},
    {$set: {gender: 'animal'}}
    )
-- {}-якщо хочемо шукати всіх, і в другому об'єкті вказуємо що саме ми хочемо
-- бачити (виводити)-{age,gender}-значення повинно бути 1, id - йде примусово,
-- щоб її вимкнути ставимо 0
db.users.find({}, {age: 1, gender: 1, _id: 0})
--як доступитись до вкладеного об'єкту та робити по ньому пошук. Якщо є вкладеність то в якості
-- ключа (прописуємо в стрічці)-address і через крапку вибираємо варіант яку саме вкладеність
-- ми хочемо побачити
db.users.find({'address.house': 45})
-- по масивам- якщо в масиві є декілька об'єктів то. Прописуємо ключ (поле по якому хочемо шукати)
-- - studying, та стрінгою, що саме хочемо шукати. Знайде всіх у кого хоча б раз зустрічається
-- - java в масиві studying
db.users.find({studying: 'java'})
-- якщо шукаємо масив по розміру(дізнатись довжину масиву)-size
db.users.find({studying: {$size: 3}})
-- перевірка чи поле взагалі існує - exists (0)-якщо такого поля немає, (1)-якщо воно є.
db.users.find({parents: {$exists: 0}})
-- майже те саме щой попередній запис, тільки якщо в полі parents буде null то він все таки його знайде
db.users.find({parents: null})
-- звернутись до всіх parents - та внести нове значення яке ми хочемо, (.$[]) - таким чином
-- звертаємось до кожного елементу масиву
db.users.updateMany(
    {parents: {$exists: 1}},
    {$set: {'parents.$[]': 'Kokos'}}
    )
-- додавання в масив новий елемент- push
db.users.updateOne({_id: ObjectId("63b5624bcae1d07fe7728319")},
    {$push: {studing: 'java'}}
    )
-- видалення з масиву елементу -pull
db.users.updateOne({_id: ObjectId("63b5624bcae1d07fe7728319")},
    {$pull: {studying: 'js'}}
    )
-- звернення до масиву який ми змінили
db.users.find({_id: ObjectId("63b5624bcae1d07fe7728319")})
-- видалення об'єкту
db.users.deleteOne({_id: ObjectId("63b5624bcae1d07fe7728319")})

--------------------------------------------------------------------------
-- хтось питав як видалити поле
db.users.updateOne(
    {_id: ObjectId("63b5624bcae1d07fe7728319")},
    {$unset: {rating: 1}}
    )
